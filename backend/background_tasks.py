import asyncio
import os
from datetime import datetime, timedelta
from database import db

class BackgroundTasks:
    def __init__(self):
        self.is_running = False
        self.tasks = []
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        if self.is_running:
            return
        
        self.is_running = True
        print("üöÄ Starting background tasks...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        self.tasks = [
            asyncio.create_task(self.expire_old_posts()),
            asyncio.create_task(self.boost_posts()),
            asyncio.create_task(self.cleanup_old_data())
        ]
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏)
        await asyncio.gather(*self.tasks, return_exceptions=True)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        self.is_running = False
        
        for task in self.tasks:
            task.cancel()
        
        if self.tasks:
            await asyncio.gather(*self.tasks, return_exceptions=True)
        
        print("üõë Background tasks stopped")
    
    async def expire_old_posts(self):
        """–ü–µ—Ä–µ–≤–æ–¥ –∏—Å—Ç–µ–∫—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤"""
        while self.is_running:
            try:
                now = datetime.now().isoformat()
                
                # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
                expired_posts = await db.fetchall(
                    """SELECT id, title, author_id FROM posts 
                       WHERE expires_at < ? AND status = 4""",  # –¢–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
                    [now]
                )
                
                if expired_posts:
                    print(f"üì¶ Found {len(expired_posts)} expired posts, moving to archive...")
                    
                    for post in expired_posts:
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞—Ä—Ö–∏–≤
                        await db.update("posts", {
                            "status": 6,  # –ê—Ä—Ö–∏–≤
                            "updated_at": now
                        }, "id = ?", [post["id"]])
                        
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–Ω—è—Ç–∏—è
                        await db.update("post_boost_schedule", {
                            "is_active": False
                        }, "post_id = ?", [post["id"]])
                        
                        print(f"  üìÅ Archived: {post['title']} (ID: {post['id']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)  # 1 hour
                
            except Exception as e:
                print(f"‚ùå Error in expire_old_posts: {str(e)}")
                await asyncio.sleep(60)  # Wait 1 minute on error
    
    async def boost_posts(self):
        """–ü–æ–¥–Ω—è—Ç–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Ç–æ–ø"""
        while self.is_running:
            try:
                now = datetime.now()
                
                # –ù–∞—Ö–æ–¥–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–¥–Ω—è—Ç–∏—é
                boost_ready = await db.fetchall(
                    """SELECT pbs.*, p.title, p.author_id 
                       FROM post_boost_schedule pbs
                       JOIN posts p ON pbs.post_id = p.id
                       WHERE pbs.next_boost_at <= ? 
                       AND pbs.is_active = 1 
                       AND p.status = 4""",  # –¢–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
                    [now.isoformat()]
                )
                
                if boost_ready:
                    print(f"üöÄ Found {len(boost_ready)} posts ready for boost...")
                    
                    for boost in boost_ready:
                        post_id = boost["post_id"]
                        
                        # "–ü–æ–¥–Ω–∏–º–∞–µ–º" –ø–æ—Å—Ç (–æ–±–Ω–æ–≤–ª—è–µ–º updated_at –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
                        await db.update("posts", {
                            "updated_at": now.isoformat()
                        }, "id = ?", [post_id])
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ
                        new_boost_count = boost["boost_count"] + 1
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–¥–Ω—è—Ç–∏—è
                        post_info = await db.fetchone(
                            """SELECT p.*, pkg.boost_interval_days, pkg.duration_days
                               FROM posts p
                               LEFT JOIN packages pkg ON p.package_id = pkg.id
                               WHERE p.id = ?""",
                            [post_id]
                        )
                        
                        boost_interval = post_info.get("boost_interval_days", 3)
                        package_duration = post_info.get("duration_days", 7)
                        
                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                        created_at = datetime.fromisoformat(post_info["created_at"])
                        package_expires = created_at + timedelta(days=package_duration)
                        next_boost_time = now + timedelta(days=boost_interval)
                        
                        if next_boost_time < package_expires:
                            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ
                            await db.update("post_boost_schedule", {
                                "next_boost_at": next_boost_time.isoformat(),
                                "boost_count": new_boost_count
                            }, "id = ?", [boost["id"]])
                            
                            print(f"  üéØ Boosted: {boost['title']} (boost #{new_boost_count})")
                        else:
                            # –ü–∞–∫–µ—Ç –∏—Å—Ç–µ–∫, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–Ω—è—Ç–∏–µ
                            await db.update("post_boost_schedule", {
                                "is_active": False,
                                "boost_count": new_boost_count
                            }, "id = ?", [boost["id"]])
                            
                            print(f"  ‚è∞ Boost expired for: {boost['title']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)  # 30 minutes
                
            except Exception as e:
                print(f"‚ùå Error in boost_posts: {str(e)}")
                await asyncio.sleep(60)  # Wait 1 minute on error
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
                cutoff_date = (datetime.now() - timedelta(days=30)).isoformat()
                
                deleted_logs = await db.delete(
                    "ai_moderation_log", 
                    "moderated_at < ?", 
                    [cutoff_date]
                )
                
                if deleted_logs > 0:
                    print(f"üßπ Cleaned up {deleted_logs} old AI moderation logs")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
                cutoff_date_views = (datetime.now() - timedelta(days=90)).isoformat()
                
                deleted_views = await db.delete(
                    "post_views",
                    "viewed_at < ?",
                    [cutoff_date_views]
                )
                
                if deleted_views > 0:
                    print(f"üßπ Cleaned up {deleted_views} old post views")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –ø–æ–¥–Ω—è—Ç–∏—è
                await db.execute(
                    """UPDATE post_boost_schedule SET is_active = 0 
                       WHERE post_id IN (
                           SELECT id FROM posts WHERE status NOT IN (4)
                       )"""
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
                await asyncio.sleep(86400)  # 24 hours
                
            except Exception as e:
                print(f"‚ùå Error in cleanup_old_data: {str(e)}")
                await asyncio.sleep(3600)  # Wait 1 hour on error

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
background_tasks = BackgroundTasks()

async def start_background_tasks():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    await background_tasks.start()

async def stop_background_tasks():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    await background_tasks.stop()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

async def manual_expire_posts():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    now = datetime.now().isoformat()
    
    expired_posts = await db.fetchall(
        """SELECT id, title, expires_at FROM posts 
           WHERE expires_at < ? AND status = 4""",
        [now]
    )
    
    count = 0
    for post in expired_posts:
        await db.update("posts", {
            "status": 6,  # –ê—Ä—Ö–∏–≤
            "updated_at": now
        }, "id = ?", [post["id"]])
        count += 1
    
    return {"expired_count": count, "expired_posts": expired_posts}

async def manual_boost_posts():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–¥–Ω—è—Ç–∏—è –ø–æ—Å—Ç–æ–≤"""
    now = datetime.now()
    
    boost_ready = await db.fetchall(
        """SELECT pbs.*, p.title 
           FROM post_boost_schedule pbs
           JOIN posts p ON pbs.post_id = p.id
           WHERE pbs.next_boost_at <= ? 
           AND pbs.is_active = 1 
           AND p.status = 4""",
        [now.isoformat()]
    )
    
    count = 0
    for boost in boost_ready:
        await db.update("posts", {
            "updated_at": now.isoformat()
        }, "id = ?", [boost["post_id"]])
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ
        next_boost = now + timedelta(days=3)  # Default 3 days
        await db.update("post_boost_schedule", {
            "next_boost_at": next_boost.isoformat(),
            "boost_count": boost["boost_count"] + 1
        }, "id = ?", [boost["id"]])
        
        count += 1
    
    return {"boosted_count": count, "boosted_posts": boost_ready}