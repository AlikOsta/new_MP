import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# Import database
from core.database import connect_to_mongo, close_mongo_connection

# Import routers
from api.users import router as users_router
from api.categories import router as categories_router
from api.posts import router as posts_router
from api.packages import router as packages_router

# Import services
from services.telegram_bot import webhook_handler, start_bot, stop_bot
from services.moderation import moderate_post_background

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await connect_to_mongo()
    
    # Initialize default data
    await initialize_default_data()
    
    # Start telegram bot in background
    asyncio.create_task(start_bot())
    
    yield
    
    # Shutdown
    await stop_bot()
    await close_mongo_connection()

app = FastAPI(
    title="Telegram Marketplace API",
    description="API for Telegram Mini App - Private Listings Platform",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(users_router)
app.include_router(categories_router)
app.include_router(posts_router)
app.include_router(packages_router)

@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "message": "Telegram Marketplace API is running"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    """Telegram bot webhook endpoint"""
    return await webhook_handler(request)

@app.get("/")
async def root():
    return {"message": "Telegram Marketplace API", "docs": "/docs"}

async def initialize_default_data():
    """Initialize default categories, currencies, and packages"""
    from core.database import get_database
    
    db = await get_database()
    
    # Check if data already exists
    if await db.super_rubrics.count_documents({}) > 0:
        return
    
    # Create default currencies
    currencies = [
        {"code": "RUB", "name_ru": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "name_ua": "–†–æ—Å—ñ–π—Å—å–∫–∏–π —Ä—É–±–ª—å", "symbol": "‚ÇΩ"},
        {"code": "USD", "name_ru": "–î–æ–ª–ª–∞—Ä –°–®–ê", "name_ua": "–î–æ–ª–∞—Ä –°–®–ê", "symbol": "$"},
        {"code": "EUR", "name_ru": "–ï–≤—Ä–æ", "name_ua": "–Ñ–≤—Ä–æ", "symbol": "‚Ç¨"},
        {"code": "UAH", "name_ru": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞", "name_ua": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è", "symbol": "‚Ç¥"},
    ]
    
    for currency in currencies:
        currency["is_active"] = True
        await db.currencies.insert_one(currency)
    
    # Create default super rubrics
    super_rubrics = [
        {"name_ru": "–†–∞–±–æ—Ç–∞", "name_ua": "–†–æ–±–æ—Ç–∞", "icon": "üíº"},
        {"name_ru": "–£—Å–ª—É–≥–∏", "name_ua": "–ü–æ—Å–ª—É–≥–∏", "icon": "üõ†Ô∏è"},
    ]
    
    rubric_ids = {}
    for rubric in super_rubrics:
        rubric["is_active"] = True
        result = await db.super_rubrics.insert_one(rubric)
        rubric_ids[rubric["name_ru"]] = str(result.inserted_id)
    
    # Create default sub rubrics
    sub_rubrics = [
        # –†–∞–±–æ—Ç–∞
        {"name_ru": "IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "name_ua": "IT —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "super_rubric_id": rubric_ids["–†–∞–±–æ—Ç–∞"]},
        {"name_ru": "–î–∏–∑–∞–π–Ω", "name_ua": "–î–∏–∑–∞–π–Ω", "super_rubric_id": rubric_ids["–†–∞–±–æ—Ç–∞"]},
        {"name_ru": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "name_ua": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "super_rubric_id": rubric_ids["–†–∞–±–æ—Ç–∞"]},
        {"name_ru": "–ü—Ä–æ–¥–∞–∂–∏", "name_ua": "–ü—Ä–æ–¥–∞–∂—ñ", "super_rubric_id": rubric_ids["–†–∞–±–æ—Ç–∞"]},
        
        # –£—Å–ª—É–≥–∏
        {"name_ru": "–†–µ–º–æ–Ω—Ç –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "name_ua": "–†–µ–º–æ–Ω—Ç —Ç–∞ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ", "super_rubric_id": rubric_ids["–£—Å–ª—É–≥–∏"]},
        {"name_ru": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "name_ua": "–ö—Ä–∞—Å–∞ —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è", "super_rubric_id": rubric_ids["–£—Å–ª—É–≥–∏"]},
        {"name_ru": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "name_ua": "–û—Å–≤—ñ—Ç–∞", "super_rubric_id": rubric_ids["–£—Å–ª—É–≥–∏"]},
        {"name_ru": "–î–æ—Å—Ç–∞–≤–∫–∞", "name_ua": "–î–æ—Å—Ç–∞–≤–∫–∞", "super_rubric_id": rubric_ids["–£—Å–ª—É–≥–∏"]},
    ]
    
    for sub_rubric in sub_rubrics:
        sub_rubric["is_active"] = True
        await db.sub_rubrics.insert_one(sub_rubric)
    
    # Create default cities
    cities = [
        {"name_ru": "–ú–æ—Å–∫–≤–∞", "name_ua": "–ú–æ—Å–∫–≤–∞"},
        {"name_ru": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "name_ua": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"},
        {"name_ru": "–ö–∏–µ–≤", "name_ua": "–ö–∏—ó–≤"},
        {"name_ru": "–•–∞—Ä—å–∫–æ–≤", "name_ua": "–•–∞—Ä–∫—ñ–≤"},
        {"name_ru": "–û–¥–µ—Å—Å–∞", "name_ua": "–û–¥–µ—Å–∞"},
        {"name_ru": "–ú–∏–Ω—Å–∫", "name_ua": "–ú—ñ–Ω—Å–∫"},
    ]
    
    city_ids = {}
    for city in cities:
        city["is_active"] = True
        result = await db.cities.insert_one(city)
        city_ids[city["name_ru"]] = str(result.inserted_id)
    
    # Get RUB currency ID
    rub_currency = await db.currencies.find_one({"code": "RUB"})
    rub_id = str(rub_currency["_id"])
    
    # Create default packages
    packages = [
        {
            "name_ru": "–ë–∞–∑–æ–≤—ã–π",
            "name_ua": "–ë–∞–∑–æ–≤–∏–π",
            "package_type": "basic",
            "price": 0.0,
            "currency_id": rub_id,
            "duration_days": 7,
            "features_ru": ["1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—é", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"],
            "features_ua": ["1 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è"],
            "is_active": True
        },
        {
            "name_ru": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "name_ua": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "package_type": "standard",
            "price": 100.0,
            "currency_id": rub_id,
            "duration_days": 14,
            "features_ru": ["–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º", "–ë–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"],
            "features_ua": ["–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è", "–í–∏–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–º", "–ë—ñ–ª—å—à–µ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"],
            "is_active": True
        },
        {
            "name_ru": "–ü—Ä–µ–º–∏—É–º",
            "name_ua": "–ü—Ä–µ–º—ñ—É–º",
            "package_type": "premium",
            "price": 250.0,
            "currency_id": rub_id,
            "duration_days": 30,
            "features_ru": ["–¢–æ–ø —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "–û—Å–æ–±–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ", "–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
            "features_ua": ["–¢–æ–ø —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è", "–û—Å–æ–±–ª–∏–≤–µ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è", "–ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤", "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞"],
            "is_active": True
        }
    ]
    
    for package in packages:
        await db.packages.insert_one(package)
    
    print("Default data initialized successfully")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
