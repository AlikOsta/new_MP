import asyncio
import httpx
import json
import os
from datetime import datetime
from typing import Dict, Any, Tuple

class MistralModerator:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.mistral.ai/v1"
        self.model = "mistral-small-latest"
        
    async def moderate_post(self, title: str, description: str, post_type: str = "general") -> Tuple[str, float, str]:
        """
        –ú–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Mistral AI
        
        Returns:
            Tuple[decision, confidence, reason]
            decision: "approved" | "rejected" 
            confidence: float 0.0-1.0
            reason: string –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        """
        
        prompt = self._build_moderation_prompt(title, description, post_type)
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": self.model,
                        "messages": [
                            {
                                "role": "system",
                                "content": "–¢—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —á–∞—Å—Ç–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."
                            },
                            {
                                "role": "user", 
                                "content": prompt
                            }
                        ],
                        "temperature": 0.1,
                        "max_tokens": 200
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    ai_response = result["choices"][0]["message"]["content"]
                    return self._parse_ai_response(ai_response)
                else:
                    print(f"Mistral API error: {response.status_code} - {response.text}")
                    return "approved", 0.5, "–ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                    
        except Exception as e:
            print(f"Error in AI moderation: {str(e)}")
            return "approved", 0.5, f"–û—à–∏–±–∫–∞ –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    def _build_moderation_prompt(self, title: str, description: str, post_type: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        
        rules = """
–ü–†–ê–í–ò–õ–ê –ú–û–î–ï–†–ê–¶–ò–ò:

–ó–ê–ü–†–ï–©–ï–ù–û:
‚ùå –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –æ—Ä—É–∂–∏–µ, –∞–ª–∫–æ–≥–æ–ª—å, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞)
‚ùå –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∏—Ä–∞–º–∏–¥—ã  
‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
‚ùå –ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã –∏ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏
‚ùå –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è
‚ùå –°–ø–∞–º, —Ä–µ–∫–ª–∞–º–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
‚ùå –ü—Ä–æ–¥–∞–∂–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –¥–∏–ø–ª–æ–º–æ–≤
‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤
‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ (—Ç–µ–ª–µ—Ñ–æ–Ω—ã, email, —Å–æ—Ü—Å–µ—Ç–∏)

–†–ê–ó–†–ï–®–ï–ù–û:
‚úÖ –ü–æ–∏—Å–∫ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
‚úÖ –ë—ã—Ç–æ–≤—ã–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏  
‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ –∏ –æ–±—É—á–µ–Ω–∏–µ
‚úÖ –†–µ–º–æ–Ω—Ç –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ
‚úÖ IT —É—Å–ª—É–≥–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚úÖ –î–∏–∑–∞–π–Ω –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ
‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
‚úÖ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:
‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ/–≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã
‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
‚ö†Ô∏è –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π
"""

        prompt = f"""
{rules}

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –û–ë–™–Ø–í–õ–ï–ù–ò–ï:
–¢–∏–ø: {post_type}
–ù–∞–∑–≤–∞–Ω–∏–µ: "{title}"
–û–ø–∏—Å–∞–Ω–∏–µ: "{description}"

–í–ï–†–ù–ò –û–¢–í–ï–¢ –í –§–û–†–ú–ê–¢–ï JSON:
{{
    "decision": "approved" –∏–ª–∏ "rejected",
    "confidence": 0.95,
    "reason": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
    "violations": ["—Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å"]
}}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è - –ª—É—á—à–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é.
"""
        return prompt
    
    def _parse_ai_response(self, ai_response: str) -> Tuple[str, float, str]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            start = ai_response.find('{')
            end = ai_response.rfind('}') + 1
            
            if start >= 0 and end > start:
                json_str = ai_response[start:end]
                result = json.loads(json_str)
                
                decision = result.get("decision", "approved")
                confidence = float(result.get("confidence", 0.5))
                reason = result.get("reason", "–ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                violations = result.get("violations", [])
                
                if violations:
                    reason += f" –ù–∞—Ä—É—à–µ–Ω–∏—è: {', '.join(violations)}"
                
                return decision, confidence, reason
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                if any(word in ai_response.lower() for word in ["reject", "–æ—Ç–∫–ª–æ–Ω", "–∑–∞–ø—Ä–µ—â", "–Ω–∞—Ä—É—à–µ–Ω"]):
                    return "rejected", 0.8, "–ò–ò –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"
                else:
                    return "approved", 0.7, "–ò–ò –æ–¥–æ–±—Ä–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
                    
        except Exception as e:
            print(f"Error parsing AI response: {str(e)}")
            return "approved", 0.5, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {str(e)}"


class TelegramNotifier:
    def __init__(self, bot_token: str, moderator_chat_id: str):
        self.bot_token = bot_token
        self.moderator_chat_id = moderator_chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    async def send_moderation_request(self, post_data: Dict[str, Any], ai_result: Dict[str, Any] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤ Telegram"""
        
        try:
            message = self._format_moderation_message(post_data, ai_result)
            keyboard = self._create_moderation_keyboard(post_data["id"])
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": self.moderator_chat_id,
                        "text": message,
                        "reply_markup": keyboard,
                        "parse_mode": "HTML"
                    }
                )
                
                return response.status_code == 200
                
        except Exception as e:
            print(f"Error sending Telegram notification: {str(e)}")
            return False
    
    def _format_moderation_message(self, post_data: Dict[str, Any], ai_result: Dict[str, Any] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        
        post_type_name = "–†–∞–±–æ—Ç–∞" if post_data.get("post_type") == "job" else "–£—Å–ª—É–≥–∞"
        price_info = f"{post_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ" if post_data.get("price") else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        
        message = f"""
üîç <b>–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò</b>

üìã <b>–¢–∏–ø:</b> {post_type_name}
üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {post_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}
üí∞ <b>–¶–µ–Ω–∞:</b> {price_info}

üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{post_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üë§ <b>–ê–≤—Ç–æ—Ä:</b> {post_data.get('author_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
üÜî <b>ID –ø–æ—Å—Ç–∞:</b> {post_data.get('id')}
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {post_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""

        if ai_result:
            ai_decision = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if ai_result.get("decision") == "approved" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            confidence = ai_result.get("confidence", 0) * 100
            
            message += f"""

ü§ñ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ò –ú–û–î–ï–†–ê–¶–ò–ò:</b>
{ai_decision} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.0f}%)
üí≠ {ai_result.get("reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")}
"""

        message += "\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        return message
    
    def _create_moderation_keyboard(self, post_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        
        return {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "callback_data": f"approve_{post_id}"},
                    {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{post_id}"}
                ],
                [
                    {"text": "üìã –î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞", "callback_data": f"details_{post_id}"}
                ]
            ]
        }
    
    async def send_status_update(self, post_data: Dict[str, Any], status: str, moderator_username: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        
        try:
            status_text = {
                "approved": "‚úÖ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û",
                "rejected": "‚ùå –û–¢–ö–õ–û–ù–ï–ù–û", 
                "blocked": "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
            }.get(status, status.upper())
            
            moderator_info = f" –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{moderator_username}" if moderator_username else ""
            
            message = f"""
{status_text}

üìù <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> {post_data.get('title')}
üÜî <b>ID:</b> {post_data.get('id')}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> {post_data.get('author_id')}
‚è∞ <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}{moderator_info}
"""

            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/sendMessage",
                    json={
                        "chat_id": self.moderator_chat_id,
                        "text": message,
                        "parse_mode": "HTML"
                    }
                )
                
                return response.status_code == 200
                
        except Exception as e:
            print(f"Error sending status update: {str(e)}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ server.py)
mistral_moderator = None
telegram_notifier = None

async def init_moderation_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    global mistral_moderator, telegram_notifier
    
    mistral_api_key = os.getenv("MISTRAL_API_KEY")
    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN") 
    telegram_moderator_chat_id = os.getenv("TELEGRAM_MODERATOR_CHAT_ID")
    
    if mistral_api_key:
        mistral_moderator = MistralModerator(mistral_api_key)
        print("‚úÖ Mistral moderator initialized")
    else:
        print("‚ö†Ô∏è MISTRAL_API_KEY not found, AI moderation disabled")
    
    if telegram_bot_token and telegram_moderator_chat_id:
        telegram_notifier = TelegramNotifier(telegram_bot_token, telegram_moderator_chat_id)
        print("‚úÖ Telegram notifier initialized")
    else:
        print("‚ö†Ô∏è Telegram credentials not found, notifications disabled")

async def moderate_post_content(post_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
    
    Returns:
        {
            "decision": "approved" | "rejected" | "manual_review",
            "ai_result": {...},
            "should_notify_moderator": bool,
            "final_status": int
        }
    """
    
    result = {
        "decision": "approved",
        "ai_result": None,
        "should_notify_moderator": False,
        "final_status": 4  # –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
    }
    
    # –ò–ò –º–æ–¥–µ—Ä–∞—Ü–∏—è
    if mistral_moderator:
        try:
            ai_decision, ai_confidence, ai_reason = await mistral_moderator.moderate_post(
                post_data.get("title", ""),
                post_data.get("description", ""),
                post_data.get("post_type", "general")
            )
            
            result["ai_result"] = {
                "decision": ai_decision,
                "confidence": ai_confidence,
                "reason": ai_reason,
                "moderated_at": datetime.now().isoformat()
            }
            
            # –ï—Å–ª–∏ –ò–ò –æ—Ç–∫–ª–æ–Ω–∏–ª —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if ai_decision == "rejected" and ai_confidence > 0.8:
                result["decision"] = "rejected"
                result["final_status"] = 5  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                return result
            
            # –ï—Å–ª–∏ –ò–ò –Ω–µ —É–≤–µ—Ä–µ–Ω –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
            # (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            
        except Exception as e:
            print(f"AI moderation failed: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –ò–ò –Ω–µ —É–≤–µ—Ä–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    result["decision"] = "manual_review"
    result["should_notify_moderator"] = True
    result["final_status"] = 3  # –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ (–∂–¥–µ—Ç —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
    
    return result