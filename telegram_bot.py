"""
Telegram Bot –¥–ª—è Telegram Marketplace Mini App
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
"""

import asyncio
import os
import logging
from typing import Dict, Any
import json

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    WebAppInfo, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment
)
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')
load_dotenv('backend/.env')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PAYMENT_PROVIDER_TOKEN = os.getenv('TELEGRAM_PAYMENTS_TOKEN')
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://958e1ad6-00a3-4c3e-a8b5-fdd4fba26a4a.preview.emergentagent.com')
MINIAPP_URL = BACKEND_URL  # Mini App URL - —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω, —á—Ç–æ –∏ backend

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class TelegramMarketplaceBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
    
    def __init__(self):
        self.backend_url = BACKEND_URL
        self.payment_provider_token = PAYMENT_PROVIDER_TOKEN
    
    async def call_backend_api(self, endpoint: str, method: str = "GET", data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ API –±—ç–∫–µ–Ω–¥–∞"""
        try:
            url = f"{self.backend_url}/api{endpoint}"
            async with httpx.AsyncClient(timeout=10.0) as client:
                if method == "GET":
                    response = await client.get(url)
                elif method == "POST":
                    response = await client.post(url, json=data)
                elif method == "PUT":
                    response = await client.put(url, json=data)
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"Backend API error: {response.status_code} - {response.text}")
                    return {}
        except Exception as e:
            logger.error(f"Error calling backend API: {str(e)}")
            return {}
    
    async def get_package_info(self, package_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ"""
        packages = await self.call_backend_api("/categories/all")
        if packages and "packages" in packages:
            for package in packages["packages"]:
                if package["id"] == package_id:
                    return package
        return {}
    
    async def create_payment_invoice(self, user_id: int, package_id: str, chat_id: int):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
            package_info = await self.get_package_info(package_id)
            
            if not package_info:
                await bot.send_message(chat_id, "‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Å–≤—è–∑–∫–∏ —Å backend
            payload = f"package_{package_id}_{user_id}"
            
            # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–¥–ª—è RUB)
            price_kopecks = int(package_info["price"] * 100)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
            await bot.send_invoice(
                chat_id=chat_id,
                title=f"–¢–∞—Ä–∏—Ñ: {package_info['name_ru']}",
                description=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n{package_info.get('features_ru', '')}",
                payload=payload,
                provider_token=self.payment_provider_token,
                currency="RUB",
                prices=[
                    LabeledPrice(
                        label=package_info['name_ru'], 
                        amount=price_kopecks
                    )
                ],
                start_parameter="marketplace_payment",
                need_email=False,
                need_phone_number=False,
                need_name=False,
                need_shipping_address=False,
                is_flexible=False
            )
            
            logger.info(f"Invoice sent for package {package_id} to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error creating payment invoice: {str(e)}")
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
marketplace_bot = TelegramMarketplaceBot()

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    """
    try:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
        webapp_button = InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
            web_app=WebAppInfo(url=MINIAPP_URL)
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        help_button = InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å",
            callback_data="help"
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [webapp_button],
            [help_button]
        ])
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å!</b>\n\n"
            "üì± –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            "üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
        )
        
        await message.answer(
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"Start command processed for user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data == "help")
async def process_help_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞</b>\n\n"
        "üîπ <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É/—É—Å–ª—É–≥—É:</b>\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏)\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
        "üîπ <b>–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '+' –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
        "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ\n\n"
        "üîπ <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π - 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ - –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ\n\n"
        "üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support"
    )
    
    await callback_query.message.edit_text(
        text=help_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]),
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "back_to_start")
async def process_back_to_start(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    webapp_button = InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        web_app=WebAppInfo(url=MINIAPP_URL)
    )
    
    help_button = InlineKeyboardButton(
        text="‚ùì –ü–æ–º–æ—â—å",
        callback_data="help"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [webapp_button],
        [help_button]
    ])
    
    welcome_text = (
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å!</b>\n\n"
        "üì± –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —É—Å–ª—É–≥–∏\n"
        "‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n\n"
        "üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    )
    
    await callback_query.message.edit_text(
        text=welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message(Command(commands=["pay"]))
async def cmd_pay(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay package_id
    """
    try:
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay package_id")
            return
        
        package_id = args[1]
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        await marketplace_bot.create_payment_invoice(user_id, package_id, chat_id)
        
    except Exception as e:
        logger.error(f"Error in pay command: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞")

@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout: PreCheckoutQuery):
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
    """
    try:
        logger.info(f"Pre-checkout query: {pre_checkout.invoice_payload}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞
        
        await pre_checkout.answer(ok=True)
        
    except Exception as e:
        logger.error(f"Error in pre-checkout: {str(e)}")
        await pre_checkout.answer(
            ok=False, 
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(lambda message: message.successful_payment)
async def successful_payment(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    try:
        payment: SuccessfulPayment = message.successful_payment
        payload = payment.invoice_payload
        
        logger.info(f"Successful payment: {payload}")
        
        # –ü–∞—Ä—Å–∏–º payload: package_id_user_id
        if payload.startswith("package_"):
            parts = payload.split("_")
            if len(parts) >= 3:
                package_id = parts[1]
                user_id = int(parts[2])
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                payment_data = {
                    "user_id": str(user_id),
                    "package_id": package_id,
                    "telegram_charge_id": payment.telegram_payment_charge_id,
                    "provider_charge_id": payment.provider_payment_charge_id,
                    "amount": payment.total_amount / 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
                    "currency": payment.currency,
                    "payload": payload
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º API backend –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                result = await marketplace_bot.call_backend_api(
                    "/packages/confirm-payment", 
                    "POST", 
                    payment_data
                )
                
                if result:
                    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                    await message.answer(
                        "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                        f"üíé –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                        f"üí∞ –°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üöÄ",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                                web_app=WebAppInfo(url=MINIAPP_URL)
                            )]
                        ]),
                        parse_mode="HTML"
                    )
                else:
                    # –û—à–∏–±–∫–∞ –Ω–∞ backend
                    await message.answer(
                        "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
                    )
                
                logger.info(f"Payment processed for user {user_id}, package {package_id}")
                
        else:
            logger.error(f"Invalid payment payload: {payload}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        logger.error(f"Error processing successful payment: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        logger.info(f"üì± Mini App URL: {MINIAPP_URL}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    if not PAYMENT_PROVIDER_TOKEN:
        print("‚ùå TELEGRAM_PAYMENTS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üì± Mini App URL: {MINIAPP_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())