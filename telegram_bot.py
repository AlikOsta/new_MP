"""
Telegram Bot –¥–ª—è Telegram Marketplace Mini App
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot (—Å—Ç–∞–±–∏–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É)
"""

import asyncio
import os
import logging
from typing import Dict, Any
import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, LabeledPrice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, PreCheckoutQueryHandler, MessageHandler, filters, ContextTypes
import httpx
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')
load_dotenv('backend/.env')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PAYMENT_PROVIDER_TOKEN = os.getenv('TELEGRAM_PAYMENTS_TOKEN')
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://958e1ad6-00a3-4c3e-a8b5-fdd4fba26a4a.preview.emergentagent.com')
MINIAPP_URL = BACKEND_URL  # Mini App URL - —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω, —á—Ç–æ –∏ backend

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramMarketplaceBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"""
    
    def __init__(self):
        self.backend_url = BACKEND_URL
        self.payment_provider_token = PAYMENT_PROVIDER_TOKEN
    
    async def call_backend_api(self, endpoint: str, method: str = "GET", data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ API –±—ç–∫–µ–Ω–¥–∞"""
        try:
            url = f"{self.backend_url}/api{endpoint}"
            async with httpx.AsyncClient(timeout=10.0) as client:
                if method == "GET":
                    response = await client.get(url)
                elif method == "POST":
                    response = await client.post(url, json=data)
                elif method == "PUT":
                    response = await client.put(url, json=data)
                
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"Backend API error: {response.status_code} - {response.text}")
                    return {}
        except Exception as e:
            logger.error(f"Error calling backend API: {str(e)}")
            return {}
    
    async def get_package_info(self, package_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ"""
        packages = await self.call_backend_api("/categories/all")
        if packages and "packages" in packages:
            for package in packages["packages"]:
                if package["id"] == package_id:
                    return package
        return {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
marketplace_bot = TelegramMarketplaceBot()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    """
    try:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
        webapp_button = InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
            web_app=WebAppInfo(url=MINIAPP_URL)
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        help_button = InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å",
            callback_data="help"
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup([
            [webapp_button],
            [help_button]
        ])
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å!</b>\n\n"
            "üì± –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            "üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
        )
        
        await update.message.reply_text(
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        logger.info(f"Start command processed for user {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    query = update.callback_query
    await query.answer()
    
    help_text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞</b>\n\n"
        "üîπ <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É/—É—Å–ª—É–≥—É:</b>\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–†–∞–±–æ—Ç–∞/–£—Å–ª—É–≥–∏)\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n\n"
        "üîπ <b>–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '+' –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n"
        "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ\n\n"
        "üîπ <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π - 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ - –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ\n\n"
        "üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support"
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    
    await query.edit_message_text(
        text=help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def back_to_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    webapp_button = InlineKeyboardButton(
        text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
        web_app=WebAppInfo(url=MINIAPP_URL)
    )
    
    help_button = InlineKeyboardButton(
        text="‚ùì –ü–æ–º–æ—â—å",
        callback_data="help"
    )
    
    keyboard = InlineKeyboardMarkup([
        [webapp_button],
        [help_button]
    ])
    
    welcome_text = (
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å!</b>\n\n"
        "üì± –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —É—Å–ª—É–≥–∏\n"
        "‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è\n\n"
        "üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    )
    
    await query.edit_message_text(
        text=welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def pay_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay package_id
    """
    try:
        args = context.args
        if not args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay package_id")
            return
        
        package_id = args[0]
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        package_info = await marketplace_bot.get_package_info(package_id)
        
        if not package_info:
            await update.message.reply_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Å–≤—è–∑–∫–∏ —Å backend
        payload = f"package_{package_id}_{user_id}"
        
        # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–¥–ª—è RUB)
        price_kopecks = int(package_info["price"] * 100)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await context.bot.send_invoice(
            chat_id=chat_id,
            title=f"–¢–∞—Ä–∏—Ñ: {package_info['name_ru']}",
            description=f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n{package_info.get('features_ru', '')}",
            payload=payload,
            provider_token=marketplace_bot.payment_provider_token,
            currency="RUB",
            prices=[
                LabeledPrice(
                    label=package_info['name_ru'], 
                    amount=price_kopecks
                )
            ],
            start_parameter="marketplace_payment",
            need_email=False,
            need_phone_number=False,
            need_name=False,
            need_shipping_address=False,
            is_flexible=False
        )
        
        logger.info(f"Invoice sent for package {package_id} to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in pay command: {str(e)}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞")

async def pre_checkout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
    """
    query = update.pre_checkout_query
    
    try:
        logger.info(f"Pre-checkout query: {query.invoice_payload}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞
        
        await query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"Error in pre-checkout: {str(e)}")
        await query.answer(
            ok=False, 
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    """
    try:
        payment = update.message.successful_payment
        payload = payment.invoice_payload
        
        logger.info(f"Successful payment: {payload}")
        
        # –ü–∞—Ä—Å–∏–º payload: package_id_user_id
        if payload.startswith("package_"):
            parts = payload.split("_")
            if len(parts) >= 3:
                package_id = parts[1]
                user_id = int(parts[2])
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                payment_data = {
                    "user_id": str(user_id),
                    "package_id": package_id,
                    "telegram_charge_id": payment.telegram_payment_charge_id,
                    "provider_charge_id": payment.provider_payment_charge_id,
                    "amount": payment.total_amount / 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
                    "currency": payment.currency,
                    "payload": payload
                }
                
                # –í—ã–∑—ã–≤–∞–µ–º API backend –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
                result = await marketplace_bot.call_backend_api(
                    "/packages/confirm-payment", 
                    "POST", 
                    payment_data
                )
                
                if result:
                    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(
                            text="üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                            web_app=WebAppInfo(url=MINIAPP_URL)
                        )]
                    ])
                    
                    await update.message.reply_text(
                        "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                        f"üíé –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                        f"üí∞ –°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üöÄ",
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                else:
                    # –û—à–∏–±–∫–∞ –Ω–∞ backend
                    await update.message.reply_text(
                        "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
                    )
                
                logger.info(f"Payment processed for user {user_id}, package {package_id}")
                
        else:
            logger.error(f"Invalid payment payload: {payload}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            
    except Exception as e:
        logger.error(f"Error processing successful payment: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    if not PAYMENT_PROVIDER_TOKEN:
        print("‚ùå TELEGRAM_PAYMENTS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üì± Mini App URL: {MINIAPP_URL}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("pay", pay_command))
    application.add_handler(CallbackQueryHandler(help_callback, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(back_to_start_callback, pattern="^back_to_start$"))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
    logger.info(f"üì± Mini App URL: {MINIAPP_URL}")
    
    # –ó–∞–ø—É—Å–∫ polling
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()